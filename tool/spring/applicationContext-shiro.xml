<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--1. 配置 SecurityManager!-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="realm" ref="jdbcRealm"></property>
    </bean>
    <!--2. 配置 CacheManager.-->
    <!--2.1 需要加入 ehcache 的 jar 包及配置文件.-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:conf/ehcache.xml"/>
    </bean>

    <!--3. 配置 Realm-->
    <!--3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean-->
    <bean id="jdbcRealm" class="com.my.shiro.ShiroRealm">
        <!--使用md5加密-->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"/>
                <property name="hashIterations" value="1"/>  <!-- 指定加密次数-->
            </bean>
        </property>
    </bean>

    <!--4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用.-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--6. 配置 ShiroFilter.-->
    <!--6.1  id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.
         若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean.-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 引入SecurityManager -->
        <property name="securityManager" ref="securityManager"></property>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/success.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>  <!-- 没有权限的页面-->

        <!--
            配置哪些页面需要受保护,以及访问这些页面需要的权限.
            格式:路径 = 拦截器[参数]
           【拦截器】
                1). anon 可以被匿名访问
                2). authc 必须认证(即登录)后才可能访问的页面.
                3). logout 登出.    退出url
                4). roles 角色过滤器   roles[权限名]
                5). user 认证或记住我均可以访问
        -->
        <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                /shiroLogin = anon
                /success.jsp = user
                /loginout = logout
                /admin.jsp = roles[admin]
                /index.jsp = roles[index]
                /** = authc
            </value>
        </property>
    </bean>
</beans>